datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type             String
  provider         String
  providerAccountId String
  refresh_token    String? @db.Text
  access_token     String? @db.Text
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  forms         Form[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Form {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  fields      Field[]  @relation("FormToField") 
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  settings    Setting? @relation(fields: [settingsId], references: [id])
  settingsId  String?  @unique

  shareableLink String? @unique @default(uuid())
}

model Field {
  id         String   @id @default(cuid())
  formId     String
  type       String   // e.g., "text", "email", "select", etc.
  label      String
  placeholder String?
  required   Boolean @default(false)
  options    Option[] @relation("FieldToOption")

  form       Form     @relation("FormToField", fields: [formId], references: [id], onDelete: Cascade)
}

model Option {
  id          String @id @default(cuid())
  fieldId     String
  value       String
  field       Field @relation("FieldToOption", fields: [fieldId], references: [id])
}

model Setting {
  id                  String  @id @default(cuid())
  formId              String  @unique
  isPublic            Boolean @default(true)
  allowMultipleResponses Boolean @default(false)
  showProgress        Boolean @default(false)

  form                Form?
}